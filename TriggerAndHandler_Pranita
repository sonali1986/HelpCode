Trigger: ToGetContactRoleId

//Owner:- Priya Ranjan
//Description:- To send CSAT email to contact present in contact role and update CSAT Email Sent Field on oppportunity
trigger ToGetContactRoleId on oppportunity (before Update,after insert) {
    
	public static Boolean isFirstTime = true;
    Map<Id,Contact> oppConMap  = new Map<Id,Contact>();
	Map<Id,Opportunity> oppIdMap  = new Map<Id,Opportunity>();
	Set<Id> oppPmIdSet = new Set<Id>();
   
	if (Trigger.isBefore && Trigger.isUpdate && isFirstTime) {
			isFirstTime=false;
            User userInfo=[Select id,name from user where id=:UserInfo.getUserId()];
            if(userInfo.Name != 'Salesforce WorkbenchAlerts'){
                for (oppportunity opp : trigger.new){
                    if(opp.CSAT_Email_Sent__c ==false 
						&& opp.Test_CSAT__c==14 
						&& opp.StageName=='Closed Won' 
						&& opp.Project_State__c!='Cancelled' 
						&& opp.Amount> 50						
						&& opp.No_Send_CSAT__c== False 
						&& opp.PM_Contact_role_email__c!= null 
						&& opp.Is_Primary__c==true 
						&& opp.Buyer_Role__c=='Buyer' 
						&& opp.Email_oppt_Out__c==false){
						   oppPmIdSet.add(opp.PM_ID__c);
						   oppIdMap.put(opp.Id,opp);
						   System.debug('&&&'+opp.Id);
					}
				}
				for(Contact con:[Select id, firstName, lastName from Contact where id in:oppPmIdSet]){
					oppConMap.put(con.id,con);
				}
			}
			if(!oppIdMap.isEmpty){
				System.debug('++++++++');
				ToGetContactRoleIdHandler.sendEmailtoContact(oppIdMap,oppConMap);
				System.debug('Email Sent ++++');
			}
	}
}

Handler
//Owner:- Priya Ranjan
//Description:- To send CSAT email to contact present in contact role and update CSAT Email Sent Field on oppportunity
public class ToGetContactRoleIdHandler {
	
	
    public static void sendEmailtoContact(Map<Id,Opportunity> oppIdMap,Map<Id,Contact> oppConMap){
        
		System.debug('@oppIdMap...'+oppIdMap);
		System.debug('@oppConMap...'+oppConMap);
        
        
        OrgWideEmailAddress[] owea = [select Id,Address, DisplayName from OrgWideEmailAddress where DisplayName ='Priya Ranjan'];
        EmailTemplate et =[SELECT Id, Name, HTMLValue,DevelopperName,Subject,body  FROM EmailTemplate where name ='CSAT Survey'];
		
        Messaging.SingleEmailMessage mail;
		List<Messaging.SingleEmailMessage>  oppEmails = new List<Messaging.SingleEmailMessage>();
		
		for(Id oppId : oppIdMap.keyset()){
			Opportunity oppObj = oppIdMap.get(oppId);
			mail = new Messaging.SingleEmailMessage();
			
			String[] toAddresses = new String[] {oppObj.PM_Contact_role_email__c};
            mail.setToAddresses(toAddresses);
            System.debug('@toAddresses'+toAddresses);
	    List<String> ccAddresses = new List<String>();
	    
	    if(!String.isBlank(oppObj.Client_Services_Lead_Email__c))
	    	ccAddresses.add(oppObj.Client_Services_Lead_Email__c);
		
	    if(!String.isBlank(oppObj.Owner.Email))
	    	ccAddresses.add(oppObj.Owner.Email);
	    
	    if(ccAddresses.isEmpty())
               ccAddresses.add('priya.ranjan@nielsen.com');
            
            mail.setCcAddresses(ccAddresses);
	    System.debug('@ccAddresses'+ccAddresses);
            mail.setTargetObjectId(oppObj.PM_ID__c);
            mail.setTemplateID(et.Id); 
            if ( owea.size() > 0 ) {
                mail.setOrgWideEmailAddressId(owea.get(0).Id);
            }       
            mail.setWhatId(oppObj.Id);
            mail.setSaveAsActivity(true);
            mail.setSubject(et.Subject);
			
			String htmlBody = et.HtmlValue;
			if(oppConMap.isEmpty() && oppConMap.get(oppObj.PM_ID__c) != null){
				htmlBody = htmlBody.replace('{!Contact.FirstName}',oppConMap.get(oppObj.PM_ID__c).firstName);
			}
            htmlBody = htmlBody.replace('{!oppportunity.Name}',oppObj.Name);
			mail.setHtmlBody(htmlBody);
			oppEmails.add(mail);
			
        }
		System.debug('@oppEmails...'+oppEmails.size());
		Messaging.sendEmail(oppEmails);
    }
    
}
